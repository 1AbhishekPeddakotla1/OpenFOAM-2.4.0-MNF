This is a simple coupled example using MUI between two instances of mdFOAM

Both cases are identical, when polyMoleculeCloud is instantiated in mdFOAM.C, each instance uses a "uniface1d" interface in the constructor of polyMoleculeCloud to:
	1) Push a single floating point value (0.1 for instance 1 and 0.2 for instance 2)
	2) Receieve the value from the other instance
	3) Create an output file in the base of the case folder called "couplingResult" where the value receieved is stored (note: this is the corresponding processor folder when running in parallel, so this file will be created at the base of each processor folder)

The case can be run using the two supplied scripts, before you run either please edit them (and the corresponding "cleanCase and createCase" scripts in the base of each case directory) and update the path to your OpenFOAM bashrc file
	1) ./coupledCaseCleanCreate: removes any pre-existing results in "case1" and "case2" and re-creates them
	2) ./coupledCaseRun: This runs the MPI MPMD job, each instance is run with 4 MPI processes (8 in total), as both instances will output to the same console this can be confusing to watch so if you prefer you can pipe the concole output to a log file (commands for both included in the script file)

Some notes about the implementation:

0) There is a new dictionary file in the "system" folder called "couplingDict", this is where the coupling interfaces are defined, multiple interfaces can be specified as either 1D, 2D or 3D, each should have a unique name in the coupled system.
1) The MUI library is detected during the ThirdParty compilation, by default it expects to find a folder called "MUI" in the base of the ThirdParty folder, if this is not found then MUI is assumed missing and won't be able to be used. I suggest downloading a copy of MUI directly from the original developers repository at https://github.com/yhtang/MUI, this will clone to a folder called "MUI" by default.
2) MUI is included in the main OpenFOAM build using a new compilation switch "-DUSE_MUI". I have created a new set of build rules called "linux64GccMNF-MUI", which is the default for the coupled branch, the switch is added in the "general" build rules, if you remove it and compile then MUI won't be included even if it is in the ThirdParty folder. If you include it and MUI isn't in the ThirdParty folder then you will likely get an error during compile.
3) Even once MUI is included in the build, in order for it to be used by mdFOAM (or any OpenFOAM application in fact), you need to supply a new runtime switch "-coupled", without this the coupling interface won't be used.
4) This example shows the basics of incorporating MUI into an OpenFOAM application. The fundamentals are now available for any application to be extended to use MUI, however a number of the "set up" header files used at the top of mdFOAM are included as part of the molecularDynamics portion of the "src" directory. To use these in a wider context you will need to make sure you copy them to the relavent areas of the "src" directory.
5) Always make sure you are mindful of using the right "#ifdef USE_MUI" command wherever you are using MUI specific code, this ensures that if the MUI library isn't available then the compiler won't try and use functionality it cannot.
6) Of course, any source file you include the mui.h header file in will also need the appropriate new "Make" rules adding to the "options" file, refer to the files for mdFOAM.C to see the example (in mot cases you will want to add both MUI and the MPI headers as MUI relies on access to mpi.h and the majoroty of the OpenFOAM code base doesn't have this by default, only very specific parts like PStream.
