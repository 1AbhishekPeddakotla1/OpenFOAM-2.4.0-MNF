/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0-MNF                             |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant/polyMesh";
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 5e-8;

// Channel size in nm (300 50 50), 50nm gap in centre for MD domain

vertices
(
    (0 0 0)
    (2 0 0)
    (2 1 0)
    (0 1 0)
    (0 0 1)
    (2 0 1)
    (2 1 1)
    (0 1 1)
    (3 0 0)
    (5 0 0)
    (5 1 0)
    (3 1 0)
    (3 0 1)
    (5 0 1)
    (5 1 1)
    (3 1 1)
);

blocks
(
    hex (0 1 2 3 4 5 6 7) dsmcZone1 (40 20 20) simpleGrading (1 1 1)
    hex (8 9 10 11 12 13 14 15) dsmcZone2 (40 20 20) simpleGrading (1 1 1)
);

boundary
(
    cyclicX_left
    {
        type cyclic;
        faces ((7 3 0 4));
        neighbourPatch cyclicX_right;
    }

    cyclicX_right
    {
        type cyclic;
        faces ((14 10 9 13));
        neighbourPatch cyclicX_left;
    }    
    
    couplingX_middle_left
    {
        type patch;
        faces ((6 2 1 5));
    }

    couplingX_middle_right
    {
        type patch;
        faces ((8 11 15 12));
    }

    cyclicY_left_back
    {
        type cyclic;
        faces ((7 6 2 3));
        neighbourPatch cyclicY_left_front;
    }

    cyclicY_left_front
    {
        type cyclic;
        faces ((4 5 1 0));
        neighbourPatch cyclicY_left_back;
    }
    
    cyclicY_right_back
    {
        type cyclic;
        faces ((15 14 10 11));
        neighbourPatch cyclicY_right_front;
    }

    cyclicY_right_front
    {
        type cyclic;
        faces ((12 13 9 8));
        neighbourPatch cyclicY_right_back;
    }

    cyclicZ_left_bottom
    {
        type cyclic;
        faces ((0 1 2 3));
        neighbourPatch cyclicZ_left_top;
    }

    cyclicZ_left_top
    {
        type cyclic;
        faces ((4 5 6 7));
        neighbourPatch cyclicZ_left_bottom;
    }
    
    cyclicZ_right_bottom
    {
        type cyclic;
        faces ((8 9 10 11));
        neighbourPatch cyclicZ_right_top;
    }

    cyclicZ_right_top
    {
        type cyclic;
        faces ((12 13 14 15));
        neighbourPatch cyclicZ_right_bottom;
    } 
)

mergePatchPairs
(
);


// ************************************************************************* //
