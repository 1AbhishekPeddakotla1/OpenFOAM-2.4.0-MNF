/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0-MNF                             |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

// MD domain size in nm (50 50 50) - total channel size (250 50 50) including DSMC domain

vertices
(
    //mdZone vertices
    (280.588235 0 0) //0
    (454.705882 0 0) //1
    (454.705882 0 147.058824) //2
    (280.588235 0 147.058824) //3
    (280.588235 147.058824 0) //4
    (454.705882 147.058824 0) //5
    (454.705882 147.058824 147.058824) //6
    (280.588235 147.058824 147.058824) //7
 
    //couplingX_left_patch vertices
    (280.588235 0 0) //8
    (280.588235 0 147.058824) //9
    (280.588235 147.058824 147.058824) //10
    (280.588235 147.058824 0) //11

    //couplingX_right_patch vertices
    (454.705882 0 0) //12
    (454.705882 0 147.058824) //13
    (454.705882 147.058824 147.058824) //14
    (454.705882 147.058824 0) //15
);

blocks
(
    hex (0 1 5 4 3 2 6 7) mdZone (10 1 1) simpleGrading (1 1 1) 
);

patches
(
    patch couplingX_left_patch
    (
        (8 9 10 11)
    )

    patch couplingX_right_patch
    (
        (12 13 14 15)
    ) 
);

boundary
(
    /*
    couplingX_left
    {
        type patch;
        faces ((8 9 10 11));
    }    

    couplingX_right
    {
        type patch;
        faces ((12 13 14 15));
    }    
    */
    periodicY_front
    {
        type cyclic;
        faces ((0 1 5 4));
        neighbourPatch periodicY_back;
    }    

    periodicY_back
    {
        type cyclic;
        faces ((3 2 6 7));
        neighbourPatch periodicY_front;
    }   

    periodicZ_bottom
    {
        type cyclic;
        faces ((0 1 2 3));
        neighbourPatch periodicZ_top;
    }    

    periodicZ_top
    {
        type cyclic;
        faces ((4 5 6 7));
        neighbourPatch periodicZ_bottom;
    }    
);

mergePatchPairs
(  
);

// ************************************************************************* //
